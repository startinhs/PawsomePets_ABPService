

@page "/dog-pets"

@attribute [Authorize(PawsomePetsPermissions.DogPets.Default)]
@using Microsoft.Extensions.Configuration
@using PawsomePets.DogPets
@using PawsomePets.Localization
@using PawsomePets.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using System.Text.Json
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using PawsomePets.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits PawsomePetsComponentBase
@inject IDogPetsAppService DogPetsAppService

@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<PawsomePetsResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS
@inject IConfiguration Configuration

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["DogPets"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Row>
            <div class="col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="DogPetSearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.FilterText"
                                        Autofocus="true"
                                        Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="DogPetSearchForm" Clicked="GetDogPetsAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>
                
                   <div class="col-md-4 col-lg-2">
            <div class="mb-3">
               <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                         Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">@L["Filters"]
                         <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
               </Button>
            </div>
       </div>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")"  class="mt-3">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Name"]</FieldLabel>
                        <TextEdit Text="@Filter.Name" TextChanged="@OnNameChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Breed"]</FieldLabel>
                        <TextEdit Text="@Filter.Breed" TextChanged="@OnBreedChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinAge"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.AgeMin"
             ValueChanged="@OnAgeMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxAge"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.AgeMax"
             ValueChanged="@OnAgeMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Gender"]</FieldLabel>
                        <TextEdit Text="@Filter.Gender" TextChanged="@OnGenderChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Color"]</FieldLabel>
                        <TextEdit Text="@Filter.Color" TextChanged="@OnColorChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinWeight"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.WeightMin"
             ValueChanged="@OnWeightMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxWeight"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.WeightMax"
             ValueChanged="@OnWeightMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["HealthStatus"]</FieldLabel>
                        <TextEdit Text="@Filter.HealthStatus" TextChanged="@OnHealthStatusChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinVaccinations"]</FieldLabel>
                        <NumericEdit TValue="int?" 
             Value="@Filter.VaccinationsMin"
             ValueChanged="@OnVaccinationsMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxVaccinations"]</FieldLabel>
                        <NumericEdit TValue="int?" 
             Value="@Filter.VaccinationsMax"
             ValueChanged="@OnVaccinationsMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinPrice"]</FieldLabel>
                        <NumericEdit TValue="decimal?" 
             Value="@Filter.PriceMin"
             ValueChanged="@OnPriceMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxPrice"]</FieldLabel>
                        <NumericEdit TValue="decimal?" 
             Value="@Filter.PriceMax"
             ValueChanged="@OnPriceMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MinPromotionPecents"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.PromotionPecentsMin"
             ValueChanged="@OnPromotionPecentsMinChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["MaxPromotionPecents"]</FieldLabel>
                        <NumericEdit TValue="float?" 
             Value="@Filter.PromotionPecentsMax"
             ValueChanged="@OnPromotionPecentsMaxChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["IsStock"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.IsStock"
		SelectedValueChanged="@OnIsStockChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["OtherInformation"]</FieldLabel>
                        <TextEdit Text="@Filter.OtherInformation" TextChanged="@OnOtherInformationChangedAsync" />                       
                    </Field>
                </Column>
            </Row>
        </div>
            <!-- Add Image Search Button -->
            <div class="col-md-4 col-lg-2">
                <div class="mb-3">
                    <Button Color="Color.Primary" Outline Style="width:100%" id="ImageSearchButton"
                            @onclick="ShowImageSearchModal">@L["Image Search"]
                        <i aria-hidden="true" class="fa ms-1 fa-image"></i>
                    </Button>
                </div>
            </div>

        </Row>
        <!-- Modal for Image Search -->
        <div id="imageSearchModal" class="modal" style="display: @(showModal ? "flex" : "none")">
            <div class="modal-content">
                <span class="close" @onclick="CloseModal">&times;</span>
                <div class="container" style="display: flex; justify-content: space-between; align-items: center;">

                    <!-- Image Upload Area -->
                    <div style="text-align: center; flex: 1; margin-right: 30px; min-height: 200px;">
                        <h3>Upload Image</h3>
                        <InputFile OnChange="UploadImage" accept="image/*" />
                        <br />
                        <div style="width: 120px; height: 120px; display: flex; align-items: center; justify-content: center;
                            border: 2px solid #ccc; border-radius: 10px; padding: 5px; margin-top: 10px;">
                            <img src="@ImagePreview" alt="Uploaded Image"
                                 style="max-width: 100px; max-height: 100px; object-fit: cover;" />
                        </div>
                    </div>

                    <!-- Webcam Area -->
                    <div style="text-align: center; flex: 1;">
                        <button @onclick="ShowWebcamPopup"
                                style="display: flex; align-items: center; justify-content: center;
                               background-color: indianred; color: white; padding: 12px 30px;
                               border: none; border-radius: 8px; font-size: 16px; font-weight: bold;
                               cursor: pointer; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                               min-height: 50px; margin-right: 20px;">
                            📷 Open camera
                        </button>
                    </div>

                    <!-- Prediction Result Area -->
                    <div style="text-align: center; flex: 1;">
                        <button @onclick="Predict"
                                style="display: flex; align-items: center; justify-content: center;
                               background-color: #2563eb; color: white; padding: 12px 25px;
                               border: none; border-radius: 8px; font-size: 16px; font-weight: bold;
                               cursor: pointer; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                               min-height: 50px;">
                            🔍 Search
                        </button>
                        <div style="min-height: 40px; margin-top: 10px;">@PredictionResult</div>
                    </div>

                </div>

                <!-- Webcam Popup -->
                <div id="webcamModal" class="modal">
                    <div class="modal-content">
                        <span class="close" @onclick="CloseWebcamPopup">&times;</span>
                        <div class="camera-container">
                            <video id="video" width="320" height="240" autoplay></video>
                            <br />
                            <button @onclick="CaptureImage" style="color: red;">Take a photo</button>
                            <br />
                            <canvas id="canvas" width="320" height="240" style="display:none;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        @code {
        private string ImagePreview;
        private string PredictionResult;
        private byte[] ImageData;
        private bool showModal = false;

        private async Task UploadImage(InputFileChangeEventArgs e)
        {
            var file = e.File;
            if (file != null)
            {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            ImageData = buffer;
            ImagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            }
        }

        private async Task Predict()
        {
            if (ImageData == null)
            {
            PredictionResult = "Vui lòng tải ảnh lên hoặc chụp ảnh.";
            return;
            }

            var content = new MultipartFormDataContent();
            content.Add(new ByteArrayContent(ImageData), "image", "upload.jpg");

            try
            {
            var response = await Http.PostAsync("http://127.0.0.1:8080/predict", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                var jsonDoc = JsonDocument.Parse(result);
                var root = jsonDoc.RootElement;

                if (root.TryGetProperty("breed_name", out JsonElement breedNameElement))
                {
                    PredictionResult = breedNameElement.GetString()?.Trim() ?? "Không xác định";
                }
                else
                {
                    PredictionResult = "Không xác định";
                }
            }
            else
            {
                PredictionResult = "Lỗi API";
            }
            }
            catch (Exception ex)
            {
            PredictionResult = "Lỗi hệ thống";
            }

            Filter.FilterText = PredictionResult;
            showModal = false;
            await GetDogPetsAsync();
        }

        private void ShowImageSearchModal()
        {
            showModal = true;
        }

        private void CloseModal()
        {
            showModal = false;
        }

        private async Task ShowWebcamPopup()
        {
            await JS.InvokeVoidAsync("showWebcamPopup");
        }

        private async Task CaptureImage()
        {
            var base64Image = await JS.InvokeAsync<string>("captureImage");
            ImagePreview = base64Image;
            ImageData = Convert.FromBase64String(base64Image.Split(',')[1]);
            await JS.InvokeVoidAsync("closeWebcamPopup");
        }

        private async Task CloseWebcamPopup()
        {
            await JS.InvokeVoidAsync("closeWebcamPopup");
        }
        }

        <style>
            .modal {
                display: none;
                position: fixed;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .modal-content {
                background-color: white;
                padding: 20px;
                border-radius: 15px;
                text-align: center;
                border: 3px solid #aaa;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
                max-width: fit-content;
            }

            .close {
                position: absolute;
                top: 10px;
                right: 15px;
                font-size: 20px;
                cursor: pointer;
            }

            .camera-container {
                border-radius: 15px;
                border: 3px solid #ccc;
                padding: 10px;
                background-color: #f9f9f9;
                display: inline-block;
            }

        </style>

        <script>
            function showWebcamPopup() {
                document.getElementById("webcamModal").style.display = "flex";
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then((stream) => {
                        let video = document.getElementById("video");
                        video.srcObject = stream;
                    })
                    .catch((err) => {
                        console.error("Lỗi truy cập webcam:", err);
                    });
            }

            function closeWebcamPopup() {
                document.getElementById("webcamModal").style.display = "none";
                let video = document.getElementById("video");
                let stream = video.srcObject;
                if (stream) {
                    let tracks = stream.getTracks();
                    tracks.forEach(track => track.stop());
                }
                video.srcObject = null;
            }

            function captureImage() {
                let canvas = document.getElementById("canvas");
                let video = document.getElementById("video");
                let context = canvas.getContext("2d");
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                return canvas.toDataURL("image/jpeg");
            }

        </script>

    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>        
        @if (SelectedDogPets.Any())
        {
            <div class="d-flex justify-content-between align-items-center mb-2">
                @if (AllDogPetsSelected)
                {
                    <p class="lead mb-0">
                        @L["AllItemsAreSelected", TotalCount]
                    </p>
                }
                else
                {
                    <p class="lead mb-0">
                        @if (SelectedDogPets.Count > 1)
                        {
                            @L["NumberOfItemsOnThisPageAreSelected", SelectedDogPets.Count]
                        }
                        else
                        {
                            @L["OneItemOnThisPageIsSelected"]
                        }
                    </p>
                }
                    
                <div>
                    @if ((SelectedDogPets.Count == PageSize || SelectedDogPets.Count == DogPetList.Count) && TotalCount > SelectedDogPets.Count)
                    {
                        if (!AllDogPetsSelected)
                        {
                            <Button Clicked="SelectAllItems" Class="mx-1 btn-outline-secondary">@L["SelectAllItems", TotalCount]</Button>
                        }
                        else
                        {
                            <Button Clicked="ClearSelection" Class="mx-1 btn-outline-secondary">@L["ClearSelection"]</Button>
                        }
                    }
                    
                    <Button Color="Color.Danger" Class="mx-1" Size="Size.Medium" Clicked="DeleteSelectedDogPetsAsync">
                        <Icon Name="@IconName.Delete" /> @L["Delete"]
                    </Button>
                </div>
            </div>
            
            <hr class="my-1 mx-0"/>
        }
        <DataGrid TItem="DogPetDto"
                  Data="DogPetList"
                  
                  SelectionMode="DataGridSelectionMode.Multiple"
                  SelectedRows="SelectedDogPets"
                  RowSelectable="@((args) => CanDeleteDogPet)"
                  SelectedRowsChanged="SelectedDogPetRowsChanged"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                       <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>   
            <DataGridColumns>
                
                @if (CanDeleteDogPet && DogPetList.Any())
                {
                    <DataGridMultiSelectColumn TItem="DogPetDto" DisplayOrder="-1" Width="30px"></DataGridMultiSelectColumn>
                }
                
                <DataGridEntityActionsColumn TItem="DogPetDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="DogPetDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="DogPetDto"
                                          Visible="@CanEditDogPet"
                                          Clicked="async () => await OpenEditDogPetModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="DogPetDto"
                                          Visible="@CanDeleteDogPet"
                                          Clicked="() => DeleteDogPetAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

                <DataGridColumn TItem="DogPetDto"
                                Field="ImageId"
                                Caption="@L["Image"]">
                    <DisplayTemplate>
                        @if (context.ImageId != null && context.ImageId != Guid.Empty)
                        {
                            <div style="display: flex; align-items: center; gap: 10px; margin-right: 10px;">
                                <img src="@($"{Configuration["ApiBaseUrl"]}/api/app/dog-pets/image?ImageId={context.ImageId}")"
                                     alt="Dog Image"
                                     style="width: 50px; height: 50px; border-radius: 5px; object-fit: cover;" />

                                <Icon Name="IconName.Download" Clicked="async () => await DownloadFileAsync(context.ImageId)" />
                            </div>
                        }
                        else
                        {
                            <span style="margin-right: 10px;">-</span>
                        }
                    </DisplayTemplate>
                </DataGridColumn>


              <DataGridColumn TItem="DogPetDto"
                      Field="Name"
                      Caption="@L["Name"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Breed"
                      Caption="@L["Breed"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Age"
                      Caption="@L["Age"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Gender"
                      Caption="@L["Gender"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Color"
                      Caption="@L["Color"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Weight"
                      Caption="@L["Weight"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="HealthStatus"
                      Caption="@L["HealthStatus"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Vaccinations"
                      Caption="@L["Vaccinations"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="Price"
                      Caption="@L["Price"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="PromotionPecents"
                      Caption="@L["PromotionPecents"]">
              </DataGridColumn>

              <DataGridColumn TItem="DogPetDto"
                      Field="IsStock"
                      Caption="@L["IsStock"]">
                    <DisplayTemplate>
                        @if (context.IsStock)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="DogPetDto"
                      Field="OtherInformation"
                      Caption="@L["OtherInformation"]">
              </DataGridColumn>

            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateDogPetModal" Closing="@CreateDogPetModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateDogPetForm">
            <ModalHeader>
                <ModalTitle>@L["NewDogPet"]</ModalTitle>
                <CloseButton Clicked="CloseCreateDogPetModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewDogPetValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewDogPet"
                            ValidateOnLoad="false">


                    <Field>
                        <FieldLabel>@L["Image"] *</FieldLabel>
                        <InputFile class="form-control file-input" OnChange="@OnNewDogPetImageChanged" required />

                        @if (OnNewDogPetImageLoading)
                        {
                            <p>@L["FileUploading"]</p>
                        }

                        @if (!string.IsNullOrEmpty(NewDogPet.ImageId.ToString()) && NewDogPet.ImageId != Guid.Empty)
                        {
                            <img src="@($"{Configuration["ApiBaseUrl"]}/api/app/dog-pets/image?ImageId={NewDogPet.ImageId}")"
                                 alt="Preview"
                                 style="width: 100px; height: 100px; object-fit: cover; margin-top: 10px; border-radius: 5px;" />
                        }

                        <p class="text-muted pt-1">
                            <i class="fa fa-info-circle"></i> @L["MaxFileSizeLimit", 10]
                        </p>
                    </Field>



                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDogPet.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Breed"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDogPet.Breed"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Age"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@NewDogPet.Age"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Gender"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDogPet.Gender"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Color"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDogPet.Color"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Weight"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@NewDogPet.Weight"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["HealthStatus"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDogPet.HealthStatus"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Vaccinations"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewDogPet.Vaccinations"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Price"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@NewDogPet.Price"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["PromotionPecents"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@NewDogPet.PromotionPecents"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewDogPet.IsStock" >@L["IsStock"]</Check>
                    </Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["OtherInformation"]</FieldLabel>
                            <TextEdit @bind-Text="@NewDogPet.OtherInformation"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateDogPetModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateDogPetForm" Clicked="CreateDogPetAsync" Disabled="@IsCreateFormDisabled()"/>

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditDogPetModal" Closing="@EditDogPetModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditDogPetForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditDogPetModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingDogPetValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingDogPet"
                            ValidateOnLoad="false">
                    
                    
                    <Field>
                        <FieldLabel>@L["Image"] *</FieldLabel>

                        @if (HasSelectedDogPetImage && EditingDogPet.ImageId != Guid.Empty)
                        {
                            <div class="mb-2">
                                <img src="@($"{Configuration["ApiBaseUrl"]}/api/app/dog-pets/image?ImageId={EditingDogPet.ImageId}")"
                                     alt="Dog Image"
                                     style="width: 100px; height: 100px; object-fit: cover; margin-bottom: 10px; border-radius: 5px;" />

                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-primary"
                                            data-bs-toggle="tooltip" data-bs-placement="top"
                                            title="@L["DownloadSelectedFile"].Value"
                                            @onclick="async () => await DownloadFileAsync(EditingDogPet.ImageId)">
                                        <i class="fa fa-download"></i>
                                    </button>

                                    <button type="button" class="btn btn-danger"
                                            data-bs-toggle="tooltip" data-bs-placement="top"
                                            title="@L["RemoveSelectedFile"].Value"
                                            @onclick="(() => { EditingDogPet.ImageId = Guid.Empty; })">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <Field>
                                <InputFile class="form-control file-input" OnChange="@OnEditDogPetImageChanged" required />

                                @if (OnEditDogPetImageLoading)
                                {
                                    <p>@L["FileUploading"]</p>
                                }

                                <p class="text-muted pt-1">
                                    <i class="fa fa-info-circle"></i> @L["MaxFileSizeLimit", 10]
                                </p>
                            </Field>
                        }
                    </Field>



                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDogPet.Name"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Breed"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDogPet.Breed"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Age"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@EditingDogPet.Age"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Gender"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDogPet.Gender"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Color"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDogPet.Color"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Weight"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@EditingDogPet.Weight"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["HealthStatus"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDogPet.HealthStatus"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Vaccinations"]</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingDogPet.Vaccinations"  Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Price"]</FieldLabel>
                            <NumericPicker TValue="decimal" @bind-Value="@EditingDogPet.Price"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["PromotionPecents"]</FieldLabel>
                            <NumericPicker TValue="float" @bind-Value="@EditingDogPet.PromotionPecents"   >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingDogPet.IsStock" >@L["IsStock"]</Check>
                    </Field>

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["OtherInformation"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingDogPet.OtherInformation"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditDogPetModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditDogPetForm" Clicked="UpdateDogPetAsync" Disabled="@IsEditFormDisabled()" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

