@page "/HostDashboard"
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Saas.Host.Blazor.Pages.Shared.Components.SaasEditionPercentageWidget
@using Volo.Saas.Host.Blazor.Pages.Shared.Components.SaasLatestTenantsWidget
@inherits PawsomePetsComponentBase
@inject HttpClient Http
@inject IJSRuntime JS

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Dashboard"]" BreadcrumbItems="@BreadcrumbItems">

</PageHeader>

@* ************************* CONTENT ************************* *@
<Card>
    <CardBody>
        <Row Class="align-items-center justify-content-center">
            <Column ColumnSize="ColumnSize.Is5.OnWidescreen.Is12.OnDesktop" class="mb-3 mb-lg-0">
                <Addons>
                    <Addon AddonType="AddonType.Start">
                        <AddonLabel>@L["Date"]</AddonLabel>
                    </Addon>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker TValue="DateTime"
                                    SelectionMode="DateInputSelectionMode.Range"
                                    DatesChanged="OnDatesChangedAsync"
                                    Placeholder="@string.Empty"/>
                    </Addon>
                </Addons>
            </Column>
            <Column ColumnSize="ColumnSize.Is2.OnWidescreen.Is12.OnDesktop" class="d-grid gap-2">
                <Button Color="Color.Primary" Clicked="@RefreshAsync">
                    <Icon Name="@IconName.Redo"></Icon> @L["Refresh"]
                </Button>
            </Column>
        </Row>
    </CardBody>
</Card>

<Row>
    @if (HasSaasPermission)
    {
        <Column ColumnSize="ColumnSize.Is12.OnDesktop.Is6.OnWidescreen">
            <SaasEditionPercentageWidgetComponent @ref="SaasEditionPercentageWidgetComponent"/>
        </Column>
        <Column ColumnSize="ColumnSize.Is12.OnDesktop.Is6.OnWidescreen">
            <SaasLatestTenantsWidgetComponent @ref="SaasLatestTenantsWidgetComponent"/>
        </Column>
    }
</Row>
<div>
    <div class="container" style="display: flex; justify-content: space-between; align-items: center;">
        <!-- Khu vực tải ảnh -->
        <div style="text-align: center; flex: 1;">
            <h2>Tải ảnh lên</h2>
            <InputFile OnChange="UploadImage" accept="image/*" />
            <br />
            <img src="@ImagePreview" alt="Uploaded Image" style="max-width: 100%; margin-top: 10px; border-radius: 10px; border: 2px solid #ccc; padding: 5px;" />
        </div>

        <!-- Khu vực kết quả -->
        <div style="text-align: center; flex: 1;">
            <h2>Kết quả dự đoán</h2>
            <button @onclick="Predict" style="color: red; margin-bottom: 10px;">Predict</button>
            <div>@PredictionResult</div>
        </div>

        <!-- Khu vực webcam -->
        <div style="text-align: center; flex: 1;">
            <h2>Chụp ảnh ngay</h2>
            <button @onclick="ShowWebcamPopup" style="color: red;">Mở webcam</button>
        </div>
    </div>

    <!-- Popup Webcam -->
    <div id="webcamModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeWebcamPopup()">&times;</span>
            <div class="camera-container">
                <video id="video" width="320" height="240" autoplay></video>
                <br />
                <button id="capture-btn" @onclick="CaptureImage" style="color: red;">Chụp ảnh</button>
                <br />
                <canvas id="canvas" width="320" height="240" style="display:none;"></canvas>
            </div>
        </div>
    </div>

    @code {
        private string ImagePreview;
        private string PredictionResult;
        private byte[] ImageData;

        private async Task UploadImage(InputFileChangeEventArgs e)
        {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            ImageData = buffer;
            ImagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        }

        private async Task Predict()
        {
        if (ImageData == null)
        {
            PredictionResult = "Vui lòng tải ảnh lên hoặc chụp ảnh.";
            return;
        }

        var content = new MultipartFormDataContent();
        content.Add(new ByteArrayContent(ImageData), "image", "upload.jpg");

        var response = await Http.PostAsync("http://127.0.0.1:8080/predict", content);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            PredictionResult = result;
        }
        else
        {
            PredictionResult = "Lỗi khi gọi API";
        }
        }

        private async Task ShowWebcamPopup()
        {
        await JS.InvokeVoidAsync("showWebcamPopup");
        }

        private async Task CaptureImage()
        {
        var base64Image = await JS.InvokeAsync<string>("captureImage");
        ImagePreview = base64Image;
        ImageData = Convert.FromBase64String(base64Image.Split(',')[1]);
        await JS.InvokeVoidAsync("closeWebcamPopup");
        }
    }

    <style>
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 3px solid #aaa;
            box-shadow: 0px 4px 8px rgba(0,0,0,0.2);
        }

        .close {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 20px;
            cursor: pointer;
        }

        .camera-container {
            border-radius: 15px;
            border: 3px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
            display: inline-block;
        }
    </style>

    <script>
        function showWebcamPopup() {
            document.getElementById("webcamModal").style.display = "flex";
            navigator.mediaDevices.getUserMedia({ video: true })
                .then((stream) => {
                    let video = document.getElementById("video");
                    video.srcObject = stream;
                })
                .catch((err) => {
                    console.error("Lỗi truy cập webcam:", err);
                });
        }

        function closeWebcamPopup() {
            document.getElementById("webcamModal").style.display = "none";
            let video = document.getElementById("video");
            let stream = video.srcObject;
            if (stream) {
                let tracks = stream.getTracks();
                tracks.forEach(track => track.stop());
            }
            video.srcObject = null;
        }

        function captureImage() {
            let canvas = document.getElementById("canvas");
            let video = document.getElementById("video");
            let context = canvas.getContext("2d");
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            return canvas.toDataURL("image/jpeg");
        }
    </script>
</div>